# Simplified Dockerfile for custom Navidrome build

# Stage 1: Build UI
FROM node:18-alpine AS ui-builder

WORKDIR /build/ui

# Copy all UI files (bin scripts needed for npm install)
COPY ui/ ./

# Install and build
RUN npm ci && npm run build

# Stage 2: Build Navidrome
FROM golang:1.24-bookworm AS go-builder

# Install dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    pkg-config \
    libtagc0-dev \
    libtag1-dev \
    libsqlite3-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Copy go files
COPY go.mod go.sum ./
RUN go mod download

# Copy source
COPY . .

# Copy built UI
COPY --from=ui-builder /build/ui/build ./ui/build

# Build
ARG GIT_SHA=dev
ARG GIT_TAG=v0.58.0-QO
RUN go build -tags=netgo \
    -ldflags="-X github.com/navidrome/navidrome/consts.gitSha=${GIT_SHA} -X github.com/navidrome/navidrome/consts.gitTag=${GIT_TAG}" \
    -o navidrome .

# Stage 3: Runtime
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ffmpeg \
    libtag1v5 \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create user
RUN useradd -r -s /bin/false -u 1000 navidrome

# Create directories
RUN mkdir -p /data /music /app && \
    chown -R navidrome:navidrome /data /music /app

# Copy binary
COPY --from=go-builder /build/navidrome /app/navidrome
RUN chmod +x /app/navidrome

USER navidrome
WORKDIR /app

EXPOSE 4533

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ["/app/navidrome", "--configfile", "/data/navidrome.toml", "ping"]

ENTRYPOINT ["/app/navidrome"]
CMD ["--configfile", "/data/navidrome.toml"]
